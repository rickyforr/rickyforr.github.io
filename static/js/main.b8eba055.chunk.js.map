{"version":3,"sources":["logo.svg","ethereumRequests.ts","useConnect.ts","usePrevious.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EthereumRequests","ethereum","getAccounts","provider","a","eth","request","method","reconnect","params","eth_accounts","disconnect","getBalance","account","sendTransaction","transactionParameters","switchChain","chainId","ethers","utils","hexValue","parseInt","sign","msg","pass","this","useEthereumWallet","React","useState","setEthereum","setProvider","currentAccount","setCurrentAccount","balance","setBalance","setChainId","isDisconnected","setIsDisconnected","accountChangePending","setAccountChangePending","useStorageState","localStorage","validation","setValidation","prevAccount","value","ref","useRef","useEffect","current","usePrevious","requests","checkProviderAvailability","window","ethereumProvider","providers","Web3Provider","getNetwork","listAccounts","then","finally","handleAccountsChanged","accounts","reConnect","undefined","length","handleBalance","formatBalance","catch","err","console","log","connect","isMetaMask","handleEthereum","cancel","addEventListener","once","setTimeout","handleDisconnect","error","handleSwitchNetwork","Math","pow","signResult","on","location","reload","filter","address","event","toFixed","switchNetwork","App","className","src","logo","alt","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.b8eba055.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import { ExternalProvider, Web3Provider } from \"@ethersproject/providers\";\nimport { ethers } from \"ethers\";\n\n/**\n * Exposes methods for making RPC requests to Ethereum.\n */\nexport class EthereumRequests {\n  readonly ethereum;\n  constructor(ethereum: Web3Provider | undefined) {\n    this.ethereum = ethereum?.provider;\n  }\n\n  public getAccounts = async (provider?: ExternalProvider) => {\n    let eth: ExternalProvider | undefined;\n    provider ? (eth = provider) : (eth = this.ethereum);\n    if (eth?.request) {\n      return await eth.request({ method: \"eth_requestAccounts\" });\n    }\n  };\n\n  public reconnect = async () => {\n    if (this?.ethereum?.request) {\n      return await this.ethereum.request({\n        method: \"wallet_requestPermissions\",\n        params: [\n          {\n            eth_accounts: {},\n          },\n        ],\n      });\n    }\n  };\n\n  public disconnect = async () => {\n    if (this?.ethereum?.request) {\n      return await this.ethereum.request({\n        method: \"eth_requestAccounts\",\n        params: [\n          {\n            eth_accounts: {},\n          },\n        ],\n      });\n    }\n  };\n\n  public getBalance = async (account: string) => {\n    if (this?.ethereum?.request) {\n      return await this.ethereum.request({\n        method: \"eth_getBalance\",\n        params: [account, \"latest\"],\n      });\n    }\n  };\n\n  public sendTransaction = async (transactionParameters: any) => {\n    if (this?.ethereum?.request) {\n      return await this.ethereum.request({\n        method: \"eth_sendTransaction\",\n        params: [transactionParameters],\n      });\n    }\n  };\n\n  public switchChain = async (chainId: string) => {\n    if (this?.ethereum?.request) {\n      return await this.ethereum.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: ethers.utils.hexValue(parseInt(chainId)) }],\n      });\n    }\n  };\n\n  public sign = async (\n    account: string | undefined,\n    msg: string,\n    pass: string\n  ) => {\n    if (this?.ethereum?.request) {\n      return await this.ethereum.request({\n        method: \"personal_sign\",\n        params: [msg, account, pass],\n      });\n    }\n  };\n}\n","import React from \"react\";\nimport { ethers } from \"ethers\";\nimport { Web3Provider } from \"@ethersproject/providers\";\nimport { EthereumRequests } from \"./ethereumRequests\";\nimport { useStorageState } from \"react-storage-hooks\";\nimport { usePrevious } from \"./usePrevious\";\n\ndeclare global {\n  interface Window {\n    ethereum?: any;\n  }\n}\n\nexport type EthereumWallet = {\n  account: string | undefined;\n  accountChangePending: boolean;\n  balance: string;\n  connect: (isMetaMask: boolean) => void;\n  disconnect: () => void;\n  ethereum: Web3Provider | undefined;\n  switchNetwork: (chainId: string) => void;\n  sign: (\n    account: string | undefined,\n    msg: string,\n    pass: string\n  ) => Promise<any>;\n  validation: string;\n  chainId: number;\n};\n\nexport const useEthereumWallet = (): EthereumWallet => {\n  const [ethereum, setEthereum] = React.useState<Web3Provider>();\n  const [provider, setProvider] = React.useState<any>();\n  const [currentAccount, setCurrentAccount] = React.useState<string>();\n  const [balance, setBalance] = React.useState<number>(0);\n  const [chainId, setChainId] = React.useState<number>(0);\n  const [isDisconnected, setIsDisconnected] = React.useState<boolean>(false);\n  const [accountChangePending, setAccountChangePending] =\n    React.useState<boolean>(false);\n  const [validation, setValidation] = useStorageState<string>(\n    localStorage,\n    \"validation\",\n    \"\"\n  );\n  const prevAccount = usePrevious(currentAccount);\n\n  const requests = new EthereumRequests(ethereum);\n\n  /**\n   * Sets the provider to state if it's available.\n   */\n  const checkProviderAvailability = async () => {\n    setProvider(window.ethereum);\n    const ethereumProvider = new ethers.providers.Web3Provider(window.ethereum);\n    setEthereum(ethereumProvider);\n    const { chainId } = await ethereumProvider.getNetwork();\n    setChainId(chainId);\n\n    // Check if User is already connected by retrieving the accounts\n    await ethereumProvider\n      .listAccounts()\n      .then((a) => {\n        // Set User account into state\n        setCurrentAccount(a[0]);\n      })\n      .finally(() => setAccountChangePending(false));\n    setAccountChangePending(false);\n  };\n\n  /**\n   * Handles changes to the current wallet account.\n   * Sets the current account to state.\n   */\n  const handleAccountsChanged = (accounts: any, reConnect?: boolean) => {\n    setValidation(\"\");\n\n    if (!reConnect) {\n      if (isDisconnected && accounts[0]) {\n        setCurrentAccount(undefined);\n        return;\n      }\n    }\n\n    if (!accounts?.length) {\n      setCurrentAccount(undefined);\n    } else {\n      setCurrentAccount(accounts[0]);\n      handleBalance(accounts[0]);\n    }\n  };\n\n  /**\n   * Handles getting current wallet balance.\n   */\n  const handleBalance = async (account: any) => {\n    await requests\n      .getBalance(account)\n      .then(formatBalance)\n      .catch((err: any) => console.log(err));\n  };\n\n  /**\n   * Connect metamask wallet or another wallet using wallet connect.\n   */\n  const connect = async (isMetaMask: boolean) => {\n    // If trying to connect to a wallet other than meta mask.\n\n    // Method for handling detecting and connecting to meta mask.\n    const handleEthereum = async () => {\n      // Metamask successfully detected.\n      console.log(\"Ethereum successfully detected!\");\n\n      setAccountChangePending(true);\n      setIsDisconnected(false);\n\n      const requests = new EthereumRequests(\n        new ethers.providers.Web3Provider(window.ethereum)\n      );\n\n      let cancel = false;\n\n      await requests\n        .reconnect()\n        .catch((err: any) => {\n          console.log(\"fail\", err);\n          cancel = true;\n        })\n        .finally(() => {\n          setAccountChangePending(false);\n        });\n\n      if (cancel) {\n        return;\n      }\n\n      await requests\n        .getAccounts()\n        .then((a) => handleAccountsChanged(a, true))\n        .catch((err: any) => console.log(err))\n        .finally(() => setAccountChangePending(false));\n\n      return;\n    };\n\n    // User attempting to connect to metamask and window.ethereum was detected.\n    if (isMetaMask) {\n      handleEthereum();\n    } else {\n      // Metamask not detected so set listener.\n      window.addEventListener(\"ethereum#initialized\", handleEthereum, {\n        once: true,\n      });\n\n      // If the event is not dispatched by the end of the timeout,\n      // the user probably doesn't have MetaMask installed.\n      setTimeout(handleEthereum, 3000); // 3 seconds\n    }\n\n    // If not trying to connect reconnect to current account.\n    await requests\n      .getAccounts()\n      .then((a) => handleAccountsChanged(a, true))\n      .catch((err: any) => console.log(err))\n      .finally(() => setAccountChangePending(false));\n\n    return;\n  };\n\n  /**\n   * Deactivates the current account.\n   */\n  const disconnect = async () => {\n    setIsDisconnected(true);\n    setCurrentAccount(undefined);\n    if (provider?.disconnect) {\n      provider.disconnect();\n    } else {\n      await requests\n        .disconnect()\n        .then(handleDisconnect)\n        .catch((error: any) => console.error(error));\n    }\n  };\n\n  const handleSwitchNetwork = async (chainId: string) => {\n    await requests.switchChain(chainId);\n  };\n\n  const handleDisconnect = () => {\n    setValidation(\"\");\n    setCurrentAccount(undefined);\n  };\n\n  const formatBalance = (a: string) => {\n    const value = parseInt(a) / Math.pow(10, 18) || 0;\n    setBalance(value);\n  };\n\n  const sign = async (\n    account: string | undefined,\n    msg: string,\n    pass: string\n  ) => {\n    const signResult = await requests.sign(account, msg, pass);\n    return signResult;\n  };\n\n  /**\n   * On mount set pending state to true.\n   * Check ethereum provider availability and connected accounts\n   * Set pending state to false.\n   */\n  React.useEffect(() => {\n    setAccountChangePending(true);\n    checkProviderAvailability();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  /**\n   * If account has been defined set it to state and get balance.\n   * add event listener for network and account changes.\n   */\n  React.useEffect(() => {\n    if (provider) {\n      provider.on(\"chainChanged\", () => {\n        checkProviderAvailability();\n      });\n      provider.on(\"disconnect\", () => {\n        window.location.reload();\n      });\n      provider.on(\"accountsChanged\", () => {\n        setValidation(\"\");\n        window.location.reload();\n      });\n\n      const filter = {\n        address: currentAccount,\n      };\n      provider.on(filter, (log: any, event: any) => {\n        console.log(log);\n\n        // Emitted whenever a DAI token transfer occurs\n      });\n    }\n    if (currentAccount && !prevAccount) {\n      handleBalance(currentAccount);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [ethereum, currentAccount, prevAccount, validation]);\n\n  return {\n    account: currentAccount,\n    accountChangePending,\n    balance: balance.toFixed(4) || \"\",\n    connect,\n    disconnect,\n    ethereum,\n    switchNetwork: handleSwitchNetwork,\n    sign,\n    validation,\n    chainId,\n  };\n};\n","import React from \"react\";\n\nexport function usePrevious<T>(value: T) {\n  const ref = React.useRef<T>();\n  React.useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { useEthereumWallet } from \"./useConnect\";\n\nfunction App() {\n  const { connect } = useEthereumWallet();\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <button onClick={() => connect(true)}>Connect</button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}