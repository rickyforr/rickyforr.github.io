{"version":3,"sources":["components/university-modal/queens.jpg","features/goblin/goblin.png","features/player/walkSprite2.png","features/world/trumper_zebra.jpg","data/map/1/index.js","components/modal/modal.component.jsx","components/university-modal/university-modal.component.jsx","features/goblin/goblin.component.jsx","features/player/player.reducer.js","features/map/map.reducer.js","features/goblin/goblin.reducer.js","store/store.js","features/goblin/goblin.container.js","features/goblin/goblin.actions.js","store/constants.js","features/map/map-tile.component.js","features/map/map.component.js","features/map/map.container.js","features/player/player.component.jsx","features/player/player.container.js","features/player/player.actions.js","features/world/world.component.js","features/world/world.container.js","features/world/world.actions.js","App.js","index.js"],"names":["module","exports","tiles","Modal","props","id","className","title","text","src","image","style","maxHeight","maxWidth","UniversityModal","Goblin","position","top","left","backgroundImage","walkSprite","backgroundPosition","spriteLocation","width","height","initialState","walkIndex","playerReducer","state","action","type","payload","mapReducer","goblinReducer","rootReducer","combineReducers","player","goblin","map","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","GoblinContainer","connect","getSpriteLocation","direction","getWalkIndex","getState","attemptMove","newPos","prevPos","getNewPosition","MAP_WIDTH","MAP_HEIGHT","observeBoundary","dispatch","dispatchMove","i","setInterval","handleMovement","getTileSprite","MapTile","value","Map","backgroundColor","margin","border","row","key","tile","MapContiner","Player","PlayerContainer","console","log","y","x","observeGameObjects","addEventListener","e","keyCode","handleKeyDown","World","useState","showModal","setShowModal","useEffect","addTiles","onClose","setTimeout","trumpetImage","WorldContainer","App","ReactDOM","render","document","getElementById"],"mappings":"yGAAAA,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,yC,gBCA3CD,EAAOC,QAAU,IAA0B,2C,mOCM9BC,EAAQ,CACnB,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtH,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtH,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtH,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtH,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtH,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtH,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtH,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GACtH,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,I,QCGzGC,G,MAfD,SAACC,GACb,OACE,yBAAKC,GAAG,UAAUC,UAAU,SAC1B,yBAAKA,UAAU,iBACb,6BACE,oDACA,4BAAKF,EAAMG,OACX,2BAAIH,EAAMI,OAEZ,yBAAKC,IAAKL,EAAMM,MAAOC,MAAO,CAAEC,UAAW,QAASC,SAAU,e,yBCWvDC,EAnBS,WACtB,OACE,yBAAKT,GAAG,UAAUC,UAAU,SAC1B,yBAAKA,UAAU,iBACb,6BACE,oDACA,0DACA,uaAMF,yBAAKG,IAAKC,IAAOC,MAAO,CAAEC,UAAW,QAASC,SAAU,c,wBCOjDE,EAhBA,SAACX,GACd,OACE,yBACEO,MAAO,CACLK,SAAU,WACVC,IAAKb,EAAMY,SAAS,GACpBE,KAAMd,EAAMY,SAAS,GACrBG,gBAAgB,OAAD,OAASC,IAAT,KACfC,mBAAoBjB,EAAMkB,eAC1BC,MAAO,OACPC,OAAQ,W,OClBVC,EAAe,CACnBT,SAAU,CAAC,EAAG,GACdM,eAAgB,UAChBI,UAAW,GAcEC,EAXO,WAAmC,IAAlCC,EAAiC,uDAAzBH,EAAcI,EAAW,uCACtD,OAAQA,EAAOC,MACb,IAAK,cACH,OAAO,eACFD,EAAOE,SAEd,QACE,OAAOH,ICbPH,EAAe,CACnBT,SAAU,CAAC,EAAG,IAcDgB,EAXI,WAAmC,IAAlCJ,EAAiC,uDAAzBH,EAAcI,EAAW,uCACnD,OAAQA,EAAOC,MACb,IAAK,WACH,OAAO,eACFD,EAAOE,SAEd,QACE,OAAOH,ICXPH,EAAe,CACnBT,SAAU,CAAC,KAAM,KACjBM,eAAgB,UAChBI,UAAW,GAcEO,EAXO,WAAmC,IAAlCL,EAAiC,uDAAzBH,EAAcI,EAAW,uCACtD,OAAQA,EAAOC,MACb,IAAK,cACH,OAAO,eACFD,EAAOE,SAEd,QACE,OAAOH,ICRPM,EAAcC,YAAgB,CAClCC,OAAQT,EACRU,OAAQJ,EACRK,IAAKN,IAKQO,EAFDC,YAAYN,EAAaO,OAAOC,8BAAgCD,OAAOC,gCCDxEC,EAAkBC,aANP,SAAChB,GACvB,OAAO,eACFA,EAAMS,UAIkBO,CCFD,SAACR,GAC7B,IAmBMS,EAAoB,SAACC,EAAWpB,GACpC,OAAQoB,GACN,IAAK,OAEL,IAAK,OAEL,IAAK,QACH,MAAM,YACR,IAAK,QACH,MAAM,IAAN,OAAuB,GAAZpB,EAAX,YAQAqB,EAAe,WACnB,IAAMrB,EAAYa,EAAMS,WAAWX,OAAOX,UAC1C,OAAOA,GAAa,EAAI,EAAIA,EAAY,GAqDpCuB,EAAc,SAACH,GACnB,IACMI,EA7Fe,SAACC,EAASL,GAC/B,OAAQA,GACN,IAAK,OACH,MAAO,CAACK,EAAQ,GCZI,GDYeA,EAAQ,IAC7C,IAAK,OACH,MAAO,CAACA,EAAQ,GCdI,GDceA,EAAQ,IAC7C,IAAK,QACH,MAAO,CAACA,EAAQ,GAAIA,EAAQ,GCfP,IDgBvB,IAAK,QACH,MAAO,CAACA,EAAQ,GAAIA,EAAQ,GCjBP,KDqGVC,CADCb,EAAMS,WAAWX,OAAOrB,SACD8B,IA7CjB,SAACI,GACvB,OAAOA,EAAO,IAAM,GAAKA,EAAO,IAAMG,MAA4BH,EAAO,IAAM,GAAKA,EAAO,IAAMI,KA8C7FC,CAAgBL,IArBD,SAACJ,EAAWI,GAC/BX,EAAMiB,SAAS,CACb1B,KAAM,cACNC,QAAS,CACPf,SAAUkC,EACVJ,YACApB,UAAWqB,IACXzB,eAAgBuB,EAAkBC,EAAWC,QAe/CU,CAAaX,EAAWI,IAmBxBQ,EAAI,EAoBR,OAjBEC,aAAY,WACV,OAAQD,IAAM,GACZ,KAAK,EACHT,EAAY,QACZ,MACF,KAAK,EACHA,EAAY,QACZ,MACF,KAAK,EACHA,EAAY,YAIf,KAIEb,EDtI+CwB,CAAe7C,IGDjE8C,G,MAAgB,SAAC/B,GACrB,OAAQA,GACN,KAAK,EACH,MAAO,QACT,KAAK,EACH,MAAO,UACT,KAAK,EACH,MAAO,UACT,KAAK,EACH,MAAO,OACT,KAAK,EACH,MAAO,OACT,KAAK,EACH,MAAO,QACT,KAAK,EACH,MAAO,SACT,QACE,MAAO,WAqBEgC,EAZC,SAAC1D,GACf,OACE,yBACEE,UAAS,eAAUuD,EAAczD,EAAM2D,QACvCpD,MAAO,CACLa,ODvCqB,GCwCrBD,MDzCoB,OE+BbyC,EAvBH,SAAC5D,GACX,OACE,yBACEO,MAAO,CACLY,MAAO,SACPC,OAAQ,QACRyC,gBAAiB,UACjBC,OAAQ,OACRC,OAAQ,oBAGT/D,EAAMF,OACLE,EAAMF,MAAMoC,KAAI,SAAC8B,EAAKV,GAAN,OACd,yBAAKW,IAAKX,EAAGpD,UAAU,OACpB8D,EAAI9B,KAAI,SAACgC,EAAMZ,GAAP,OACP,kBAAC,EAAD,CAASW,IAAKX,EAAGK,MAAOO,aChBzBC,EAAc3B,aAJH,SAAChB,GAAD,MAAY,CAClC1B,MAAO0B,EAAMU,IAAIpC,SAGQ0C,CAAyBoB,G,iBCiBrCQ,EAhBA,SAACpE,GACd,OACE,yBACEO,MAAO,CACLK,SAAU,WACVC,IAAKb,EAAMY,SAAS,GACpBE,KAAMd,EAAMY,SAAS,GACrBG,gBAAgB,OAAD,OAASC,IAAT,KACfC,mBAAoBjB,EAAMkB,eAC1BC,MAAO,OACPC,OAAQ,WCRHiD,EAAkB7B,aANP,SAAChB,GACvB,OAAO,eACFA,EAAMQ,UAIkBQ,CCFD,SAACR,GAC7B,IAmBMS,EAAoB,SAACC,EAAWpB,GACpC,OAAQoB,GACN,IAAK,OACH,MAAM,IAAN,OAAuB,GAAZpB,EAAX,aACF,IAAK,OACH,MAAM,IAAN,OAAuB,GAAZA,EAAX,YACF,IAAK,QACH,MAAM,IAAN,OAAuB,GAAZA,EAAX,aACF,IAAK,QACH,MAAM,IAAN,OAAuB,GAAZA,EAAX,YAQAqB,EAAe,WACnB,IAAMrB,EAAYa,EAAMS,WAAWZ,OAAOV,UAC1C,OAAOA,GAAa,EAAI,EAAIA,EAAY,GAqDpCuB,EAAc,SAACH,GACnB,IACMI,EA7Fe,SAACC,EAASL,GAC/B,OAAQA,GACN,IAAK,OACH,MAAO,CAACK,EAAQ,GNZI,GMYeA,EAAQ,IAC7C,IAAK,OACH,MAAO,CAACA,EAAQ,GNdI,GMceA,EAAQ,IAC7C,IAAK,QACH,MAAO,CAACA,EAAQ,GAAIA,EAAQ,GNfP,IMgBvB,IAAK,QACH,MAAO,CAACA,EAAQ,GAAIA,EAAQ,GNjBP,KMqGVC,CADCb,EAAMS,WAAWZ,OAAOpB,SACD8B,IA7CjB,SAACI,GACvB,OAAOA,EAAO,IAAM,GAAKA,EAAO,IAAMG,MAA4BH,EAAO,IAAM,GAAKA,EAAO,IAAMI,KA8C7FC,CAAgBL,IApCK,SAACA,GAC1B,IAAMhD,EAAQqC,EAAMS,WAAWV,IAAIpC,MACnCwE,QAAQC,IAAIzE,GACZ,IAAM0E,EAAI1B,EAAO,GNtEQ,GMuEnB2B,EAAI3B,EAAO,GNxEO,GM0ExB,OADiBhD,EAAM0E,GAAGC,GACR,EA8BaC,CAAmB5B,IArB/B,SAACJ,EAAWI,GAC/BX,EAAMiB,SAAS,CACb1B,KAAM,cACNC,QAAS,CACPf,SAAUkC,EACVJ,YACApB,UAAWqB,IACXzB,eAAgBuB,EAAkBC,EAAWC,QAe/CU,CAAaX,EAAWI,IAuB5B,OAJAT,OAAOsC,iBAAiB,WAAW,SAACC,IAfd,SAACA,GACrB,OAAQA,EAAEC,SACR,KAAK,GACH,OAAOhC,EAAY,QACrB,KAAK,GACH,OAAOA,EAAY,SACrB,KAAK,GACH,OAAOA,EAAY,QACrB,KAAK,GACH,OAAOA,EAAY,SACrB,QACEyB,QAAQC,IAAIK,EAAEC,UAKlBC,CAAcF,MAGT5C,EDtH+CwB,CAAeY,I,iBE0CxDW,EAvCD,SAAC/E,GAAW,IAAD,EACWgF,oBAAS,GADpB,mBAChBC,EADgB,KACLC,EADK,KAGvBC,qBAAU,WACRnF,EAAMoF,aACL,IAEH,IAAMC,EAAU,WACdH,GAAa,GACbI,YAAW,WACTJ,GAAa,KACZ,MAGL,OACE,yBACE3E,MAAO,CACLK,SAAU,WACVO,MAAO,QACPC,OAAQ,QACR0C,OAAQ,SAGV,kBAACK,EAAD,MACA,kBAAC5B,EAAD,MACA,kBAAC8B,EAAD,MAC8B,MAA7BrE,EAAMgC,OAAOpB,SAAS,IAA2C,IAA7BZ,EAAMgC,OAAOpB,SAAS,IAAYqE,GACrE,kBAAC,EAAD,CACEI,QAASA,EACT/E,MAAOiF,IACPnF,KAAK,sQAIqB,MAA7BJ,EAAMgC,OAAOpB,SAAS,IAA2C,MAA7BZ,EAAMgC,OAAOpB,SAAS,IAAcqE,GAAa,kBAAC,EAAD,CAAiBI,QAASA,MCnCzGG,EAAiBhD,aARN,SAAChB,GAAD,MAAY,CAClCQ,OAAQR,EAAMQ,WAGW,SAACoB,GAAD,MAAe,CACxCgC,SAAU,kBAAMhC,ECHT,CACL1B,KAAM,WACNC,QAAS,CACP7B,eDGwB0C,CAA6CuC,GEA5DU,EARH,WACV,OACE,yBAAKvF,UAAU,OACb,kBAACsF,EAAD,QCANE,IAASC,OACL,kBAAC,IAAD,CAAUxD,MAAOA,GAAjB,IAAyB,kBAAC,EAAD,OAC3ByD,SAASC,eAAe,W","file":"static/js/main.f9f9804d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/queens.36a704ba.jpg\";","module.exports = __webpack_public_path__ + \"static/media/goblin.01811980.png\";","module.exports = __webpack_public_path__ + \"static/media/walkSprite2.b49dd378.png\";","module.exports = __webpack_public_path__ + \"static/media/trumper_zebra.9f1b0a71.jpg\";","/**\r\n * The tile matrix with each number representing an oject in the game.\r\n * 0 = grass,\r\n * 5 = rock,\r\n * 6 = tree\r\n */\r\nexport const tiles = [\r\n  [0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 6, 0, 5, 5, 0, 0, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0],\r\n  [0, 6, 6, 0, 0, 5, 5, 0, 6, 0, 6, 0, 5, 5, 0, 5, 5, 5, 5, 6, 6, 6, 0, 6, 6, 6, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n  [0, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 6, 6, 0, 0, 0, 0, 0, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 5, 0, 6, 6, 6, 6, 6, 0],\r\n  [0, 6, 6, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 5, 5, 0, 5, 5, 5, 0, 6, 6, 0, 6, 0, 5, 5, 5, 0, 5, 5, 6, 6, 6, 6, 6, 6],\r\n  [1, 6, 6, 6, 6, 0, 0, 2, 0, 0, 5, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 0, 5, 5, 5, 0, 5, 5, 0, 7, 5, 5, 6, 6],\r\n  [0, 0, 5, 5, 5, 5, 0, 6, 0, 0, 0, 0, 0, 0, 0, 6, 6, 6, 0, 0, 5, 6, 0, 0, 0, 6, 6, 0, 5, 5, 5, 5, 5, 5, 0, 0, 0, 5, 6, 6],\r\n  [0, 6, 6, 6, 0, 0, 0, 6, 0, 6, 0, 0, 0, 0, 0, 6, 6, 6, 0, 0, 5, 6, 6, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 6, 6],\r\n  [0, 0, 0, 0, 0, 5, 5, 6, 0, 6, 6, 5, 5, 5, 0, 6, 6, 6, 0, 0, 0, 6, 6, 6, 6, 0, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\r\n  [0, 6, 6, 6, 6, 6, 6, 6, 0, 6, 6, 6, 6, 6, 0, 6, 6, 6, 0, 0, 0, 6, 6, 6, 6, 6, 0, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],\r\n];\r\n","import React from \"react\";\r\nimport \"./modal.css\";\r\n\r\nconst Modal = (props) => {\r\n  return (\r\n    <div id=\"myModal\" className=\"modal\">\r\n      <div className=\"modal-content\">\r\n        <div>\r\n          <h3>Achievment Unlocked!</h3>\r\n          <h5>{props.title}</h5>\r\n          <p>{props.text}</p>\r\n        </div>\r\n        <img src={props.image} style={{ maxHeight: \"400px\", maxWidth: \"200px\" }}></img>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React from \"react\";\r\nimport \"./modal.css\";\r\nimport image from \"./queens.jpg\";\r\n\r\nconst UniversityModal = () => {\r\n  return (\r\n    <div id=\"myModal\" className=\"modal\">\r\n      <div className=\"modal-content\">\r\n        <div>\r\n          <h3>Achievment Unlocked!</h3>\r\n          <h5>Bsc(Honours) Earth Science</h5>\r\n          <p>\r\n            What can I say...I love rocks!. From 2001 - 2005 I attended Queens University in Kingston Ontario and earned my bachelors degree in Earth Science. It was a lot of fun\r\n            and the reason I first moved out to Calgary. Highlights were Geological Field School in Quebec and the Swamp Race. That's where they hide a keg in the swamp and 2 teams\r\n            raced to reach it first, then there was the Swamp Race.\r\n          </p>\r\n        </div>\r\n        <img src={image} style={{ maxHeight: \"400px\", maxWidth: \"200px\" }}></img>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UniversityModal;\r\n","import React from \"react\";\r\nimport walkSprite from \"./goblin.png\";\r\n\r\n/**\r\n * Renders the goblin sprite.\r\n *\r\n * @param props    The props to be used by the component.\r\n */\r\nconst Goblin = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        position: \"absolute\",\r\n        top: props.position[1],\r\n        left: props.position[0],\r\n        backgroundImage: `url(${walkSprite})`,\r\n        backgroundPosition: props.spriteLocation,\r\n        width: \"50px\",\r\n        height: \"60px\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Goblin;\r\n","const initialState = {\r\n  position: [0, 0],\r\n  spriteLocation: \"0px 0px\",\r\n  walkIndex: 0,\r\n};\r\n\r\nconst playerReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"MOVE_PLAYER\":\r\n      return {\r\n        ...action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default playerReducer;\r\n","const initialState = {\r\n  position: [0, 0],\r\n};\r\n\r\nconst mapReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"ADD_TILE\":\r\n      return {\r\n        ...action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default mapReducer;\r\n","const initialState = {\r\n  position: [1020, 320],\r\n  spriteLocation: \"6px 7px\",\r\n  walkIndex: 0,\r\n};\r\n\r\nconst goblinReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case \"MOVE_GOBLIN\":\r\n      return {\r\n        ...action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default goblinReducer;\r\n","import { combineReducers, createStore } from \"redux\";\r\nimport playerReducer from \"../features/player/player.reducer\";\r\nimport mapReducer from \"../features/map/map.reducer\";\r\nimport goblinReducer from \"../features/goblin/goblin.reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  player: playerReducer,\r\n  goblin: goblinReducer,\r\n  map: mapReducer,\r\n});\r\n\r\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__());\r\n\r\nexport default store;\r\n","import { connect } from \"react-redux\";\r\nimport Goblin from \"./goblin.component\";\r\nimport { handleMovement } from \"./goblin.actions\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ...state.goblin,\r\n  };\r\n};\r\n\r\nexport const GoblinContainer = connect(mapStateToProps)(handleMovement(Goblin));\r\n","import { MAP_HEIGHT, MAP_WIDTH, SPRITE_HEIGHT, SPRITE_WIDTH } from \"../../store/constants\";\r\nimport store from \"../../store/store\";\r\n\r\n/**\r\n * Controls goblin movement within the game.\r\n *\r\n * @param player    The player component.\r\n */\r\nexport const handleMovement = (player) => {\r\n  const getNewPosition = (prevPos, direction) => {\r\n    switch (direction) {\r\n      case \"WEST\":\r\n        return [prevPos[0] - SPRITE_WIDTH, prevPos[1]];\r\n      case \"EAST\":\r\n        return [prevPos[0] + SPRITE_WIDTH, prevPos[1]];\r\n      case \"NORTH\":\r\n        return [prevPos[0], prevPos[1] - SPRITE_HEIGHT];\r\n      case \"SOUTH\":\r\n        return [prevPos[0], prevPos[1] + SPRITE_HEIGHT];\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Returns the offset in px for the sprite image in order to simulate player animation.\r\n   *\r\n   * @param direction    The direction of the move (EAST, WEST, NORTH, SOUTH).\r\n   * @param walkIndex    The index used to set the player sprite image.\r\n   */\r\n  const getSpriteLocation = (direction, walkIndex) => {\r\n    switch (direction) {\r\n      case \"EAST\":\r\n        return `-0px -0px`;\r\n      case \"WEST\":\r\n        return `-0px -0px`;\r\n      case \"NORTH\":\r\n        return `-0px -0px`;\r\n      case \"SOUTH\":\r\n        return `-${walkIndex * 21}px 0px`;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Returns the walk index as the player moves.\r\n   * There are 4 different sprite images for each direction so index must be reset to 0 after it reaches 3.\r\n   */\r\n  const getWalkIndex = () => {\r\n    const walkIndex = store.getState().goblin.walkIndex;\r\n    return walkIndex >= 2 ? 0 : walkIndex + 1;\r\n  };\r\n\r\n  /**\r\n   * Checks to see if the new position is within the bounds of the map.\r\n   * Returns new position if within bounds and old position if move would be out of bounds.\r\n   *\r\n   * @param prevPos    The player's previous position.\r\n   * @param newPos     The player's new position.\r\n   */\r\n  const observeBoundary = (newPos) => {\r\n    return newPos[0] >= 0 && newPos[0] <= MAP_WIDTH - SPRITE_WIDTH && newPos[1] >= 0 && newPos[1] <= MAP_HEIGHT - SPRITE_HEIGHT * 2;\r\n  };\r\n\r\n  /**\r\n   * Checks to see if the new position is within the bounds of the map.\r\n   * Returns new position if within bounds and old position if move would be out of bounds.\r\n   *\r\n   * @param prevPos    The player's previous position.\r\n   * @param newPos     The player's new position.\r\n   */\r\n  const observeGameObjects = (newPos) => {\r\n    const tiles = store.getState().map.tiles;\r\n    console.log(tiles);\r\n    const y = newPos[1] / SPRITE_HEIGHT;\r\n    const x = newPos[0] / SPRITE_WIDTH;\r\n    const nextTile = tiles[y][x];\r\n    return nextTile < 5;\r\n  };\r\n\r\n  /**\r\n   * Dispatches an action to move the player.\r\n   *\r\n   * @param newPos      The player's new position.\r\n   * @param direction    The direction of the move (EAST, WEST, NORTH, SOUTH).\r\n   */\r\n  const dispatchMove = (direction, newPos) => {\r\n    store.dispatch({\r\n      type: \"MOVE_GOBLIN\",\r\n      payload: {\r\n        position: newPos,\r\n        direction,\r\n        walkIndex: getWalkIndex(),\r\n        spriteLocation: getSpriteLocation(direction, getWalkIndex()),\r\n      },\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Checks if the new position will observe boundaries and game objects and calls method to move the player.\r\n   *\r\n   * @param direction    The direction of the move (EAST, WEST, NORTH, SOUTH).\r\n   */\r\n  const attemptMove = (direction) => {\r\n    const prevPos = store.getState().goblin.position;\r\n    const newPos = getNewPosition(prevPos, direction);\r\n\r\n    if (observeBoundary(newPos)) {\r\n      dispatchMove(direction, newPos);\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    switch (e.keyCode) {\r\n      case 37:\r\n        return attemptMove(\"WEST\");\r\n      case 38:\r\n        return attemptMove(\"NORTH\");\r\n      case 39:\r\n        return attemptMove(\"EAST\");\r\n      case 40:\r\n        return attemptMove(\"SOUTH\");\r\n      default:\r\n        console.log(e.keyCode);\r\n    }\r\n  };\r\n\r\n  let i = 1;\r\n  const repeatMove = () => {\r\n    // attemptMove(direction === \"WEST\" ? \"EAST\" : \"WEST\");\r\n    setInterval(() => {\r\n      switch (i++ % 2) {\r\n        case 0:\r\n          attemptMove(\"WEST\");\r\n          break;\r\n        case 1:\r\n          attemptMove(\"EAST\");\r\n          break;\r\n        case 2:\r\n          attemptMove(\"SOUTH\");\r\n          break;\r\n      }\r\n      // attemptMove(direction === \"WEST\" ? \"EAST\" : \"WEST\");\r\n    }, 1000);\r\n  };\r\n\r\n  repeatMove();\r\n  return player;\r\n};\r\n","export const SPRITE_WIDTH = 30;\r\nexport const SPRITE_HEIGHT = 60;\r\nexport const MAP_HEIGHT = SPRITE_HEIGHT * 10;\r\nexport const MAP_WIDTH = SPRITE_WIDTH * 40;\r\n","import React from \"react\";\r\nimport { SPRITE_HEIGHT, SPRITE_WIDTH } from \"../../store/constants\";\r\nimport \"./map.css\";\r\n\r\n/**\r\n * Returns class name for different tyles based on type enum value.\r\n *\r\n * @param type    Type of tile to render (grass, rocks, etc.)\r\n */\r\nconst getTileSprite = (type) => {\r\n  switch (type) {\r\n    case 0:\r\n      return \"grass\";\r\n    case 1:\r\n      return \"trumpet\";\r\n    case 2:\r\n      return \"diploma\";\r\n    case 5:\r\n      return \"rock\";\r\n    case 6:\r\n      return \"tree\";\r\n    case 7:\r\n      return \"chest\";\r\n    case 8:\r\n      return \"goblin\";\r\n    default:\r\n      return \"grass\";\r\n  }\r\n};\r\n\r\n/**\r\n * Renders a tile for the game map.\r\n *\r\n * @param props    The component props.\r\n */\r\nconst MapTile = (props) => {\r\n  return (\r\n    <div\r\n      className={`tile ${getTileSprite(props.value)}`}\r\n      style={{\r\n        height: SPRITE_HEIGHT,\r\n        width: SPRITE_WIDTH,\r\n      }}\r\n    ></div>\r\n  );\r\n};\r\n\r\nexport default MapTile;\r\n","import React from \"react\";\r\nimport MapTile from \"./map-tile.component\";\r\n\r\n/**\r\n * Renders the game map background and objects.\r\n *\r\n * @param props    The props to be used by the component.\r\n */\r\nconst Map = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        width: \"1200px\",\r\n        height: \"600px\",\r\n        backgroundColor: \"#53821b\",\r\n        margin: \"auto\",\r\n        border: \"solid 2px white\",\r\n      }}\r\n    >\r\n      {props.tiles &&\r\n        props.tiles.map((row, i) => (\r\n          <div key={i} className=\"row\">\r\n            {row.map((tile, i) => (\r\n              <MapTile key={i} value={tile} />\r\n            ))}\r\n          </div>\r\n        ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Map;\r\n","import { connect } from \"react-redux\";\r\nimport Map from \"./map.component\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  tiles: state.map.tiles,\r\n});\r\n\r\nexport const MapContiner = connect(mapStateToProps)(Map);\r\n","import React from \"react\";\r\nimport walkSprite from \"./walkSprite2.png\";\r\n\r\n/**\r\n * Renders the game sprite (player).\r\n *\r\n * @param props    The props to be used by the component.\r\n */\r\nconst Player = (props) => {\r\n  return (\r\n    <div\r\n      style={{\r\n        position: \"absolute\",\r\n        top: props.position[1],\r\n        left: props.position[0],\r\n        backgroundImage: `url(${walkSprite})`,\r\n        backgroundPosition: props.spriteLocation,\r\n        width: \"30px\",\r\n        height: \"60px\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default Player;\r\n","import { connect } from \"react-redux\";\r\nimport { handleMovement } from \"./player.actions\";\r\nimport Player from \"./player.component\";\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    ...state.player,\r\n  };\r\n};\r\n\r\nexport const PlayerContainer = connect(mapStateToProps)(handleMovement(Player));\r\n","import { MAP_HEIGHT, MAP_WIDTH, SPRITE_HEIGHT, SPRITE_WIDTH } from \"../../store/constants\";\r\nimport store from \"../../store/store\";\r\n\r\n/**\r\n * Controls player movement within the game.\r\n *\r\n * @param player    The player component.\r\n */\r\nexport const handleMovement = (player) => {\r\n  const getNewPosition = (prevPos, direction) => {\r\n    switch (direction) {\r\n      case \"WEST\":\r\n        return [prevPos[0] - SPRITE_WIDTH, prevPos[1]];\r\n      case \"EAST\":\r\n        return [prevPos[0] + SPRITE_WIDTH, prevPos[1]];\r\n      case \"NORTH\":\r\n        return [prevPos[0], prevPos[1] - SPRITE_HEIGHT];\r\n      case \"SOUTH\":\r\n        return [prevPos[0], prevPos[1] + SPRITE_HEIGHT];\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Returns the offset in px for the sprite image in order to simulate player animation.\r\n   *\r\n   * @param direction    The direction of the move (EAST, WEST, NORTH, SOUTH).\r\n   * @param walkIndex    The index used to set the player sprite image.\r\n   */\r\n  const getSpriteLocation = (direction, walkIndex) => {\r\n    switch (direction) {\r\n      case \"EAST\":\r\n        return `-${walkIndex * 31}px -124px`;\r\n      case \"WEST\":\r\n        return `-${walkIndex * 31}px -60px`;\r\n      case \"NORTH\":\r\n        return `-${walkIndex * 31}px -194px`;\r\n      case \"SOUTH\":\r\n        return `-${walkIndex * 31}px 0px`;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Returns the walk index as the player moves.\r\n   * There are 4 different sprite images for each direction so index must be reset to 0 after it reaches 3.\r\n   */\r\n  const getWalkIndex = () => {\r\n    const walkIndex = store.getState().player.walkIndex;\r\n    return walkIndex >= 3 ? 0 : walkIndex + 1;\r\n  };\r\n\r\n  /**\r\n   * Checks to see if the new position is within the bounds of the map.\r\n   * Returns new position if within bounds and old position if move would be out of bounds.\r\n   *\r\n   * @param prevPos    The player's previous position.\r\n   * @param newPos     The player's new position.\r\n   */\r\n  const observeBoundary = (newPos) => {\r\n    return newPos[0] >= 0 && newPos[0] <= MAP_WIDTH - SPRITE_WIDTH && newPos[1] >= 0 && newPos[1] <= MAP_HEIGHT - SPRITE_HEIGHT * 2;\r\n  };\r\n\r\n  /**\r\n   * Checks to see if the new position is within the bounds of the map.\r\n   * Returns new position if within bounds and old position if move would be out of bounds.\r\n   *\r\n   * @param prevPos    The player's previous position.\r\n   * @param newPos     The player's new position.\r\n   */\r\n  const observeGameObjects = (newPos) => {\r\n    const tiles = store.getState().map.tiles;\r\n    console.log(tiles);\r\n    const y = newPos[1] / SPRITE_HEIGHT;\r\n    const x = newPos[0] / SPRITE_WIDTH;\r\n    const nextTile = tiles[y][x];\r\n    return nextTile < 5;\r\n  };\r\n\r\n  /**\r\n   * Dispatches an action to move the player.\r\n   *\r\n   * @param newPos      The player's new position.\r\n   * @param direction    The direction of the move (EAST, WEST, NORTH, SOUTH).\r\n   */\r\n  const dispatchMove = (direction, newPos) => {\r\n    store.dispatch({\r\n      type: \"MOVE_PLAYER\",\r\n      payload: {\r\n        position: newPos,\r\n        direction,\r\n        walkIndex: getWalkIndex(),\r\n        spriteLocation: getSpriteLocation(direction, getWalkIndex()),\r\n      },\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Checks if the new position will observe boundaries and game objects and calls method to move the player.\r\n   *\r\n   * @param direction    The direction of the move (EAST, WEST, NORTH, SOUTH).\r\n   */\r\n  const attemptMove = (direction) => {\r\n    const prevPos = store.getState().player.position;\r\n    const newPos = getNewPosition(prevPos, direction);\r\n\r\n    if (observeBoundary(newPos) && observeGameObjects(newPos)) {\r\n      dispatchMove(direction, newPos);\r\n    }\r\n  };\r\n\r\n  const handleKeyDown = (e) => {\r\n    switch (e.keyCode) {\r\n      case 37:\r\n        return attemptMove(\"WEST\");\r\n      case 38:\r\n        return attemptMove(\"NORTH\");\r\n      case 39:\r\n        return attemptMove(\"EAST\");\r\n      case 40:\r\n        return attemptMove(\"SOUTH\");\r\n      default:\r\n        console.log(e.keyCode);\r\n    }\r\n  };\r\n\r\n  window.addEventListener(\"keydown\", (e) => {\r\n    handleKeyDown(e);\r\n  });\r\n\r\n  return player;\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport Modal from \"../../components/modal/modal.component\";\r\nimport UniversityModal from \"../../components/university-modal/university-modal.component\";\r\nimport { GoblinContainer } from \"../goblin/goblin.container\";\r\nimport { MapContiner } from \"../map/map.container\";\r\nimport { PlayerContainer } from \"../player/player.container\";\r\nimport trumpetImage from \"./trumper_zebra.jpg\";\r\n\r\n/**\r\n * Renders the game world.\r\n *\r\n * @param props    The component props.\r\n */\r\nconst World = (props) => {\r\n  const [showModal, setShowModal] = useState(true);\r\n\r\n  useEffect(() => {\r\n    props.addTiles();\r\n  }, []);\r\n\r\n  const onClose = () => {\r\n    setShowModal(false);\r\n    setTimeout(() => {\r\n      setShowModal(true);\r\n    }, 5000);\r\n  };\r\n\r\n  return (\r\n    <div\r\n      style={{\r\n        position: \"relative\",\r\n        width: \"800px\",\r\n        height: \"400px\",\r\n        margin: \"20px\",\r\n      }}\r\n    >\r\n      <MapContiner />\r\n      <GoblinContainer />\r\n      <PlayerContainer />\r\n      {props.player.position[1] === 240 && props.player.position[0] === 0 && showModal && (\r\n        <Modal\r\n          onClose={onClose}\r\n          image={trumpetImage}\r\n          text=\" I began playing trumpet when I was 11 years old. I was hooked! Played a lot with school bands, the jazz band in university and had a short stint with a local band\r\n            called Freak Motif (check them out!). Here's me playing at the Motion Notion Festival in BC\"\r\n        />\r\n      )}\r\n      {props.player.position[1] === 240 && props.player.position[0] === 210 && showModal && <UniversityModal onClose={onClose} />}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default World;\r\n","import { connect } from \"react-redux\";\r\nimport { addTiles } from \"./world.actions\";\r\nimport World from \"./world.component\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  player: state.player,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  addTiles: () => dispatch(addTiles()),\r\n});\r\n\r\nexport const WorldContainer = connect(mapStateToProps, mapDispatchToProps)(World);\r\n","import { tiles } from \"../../data/map/1\";\r\n\r\n/**\r\n * Returns an action to add tile matrix to the game.\r\n */\r\nexport const addTiles = () => {\r\n  return {\r\n    type: \"ADD_TILE\",\r\n    payload: {\r\n      tiles,\r\n    },\r\n  };\r\n};\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { WorldContainer } from \"./features/world/world.container\";\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <WorldContainer />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from \"../src/store/store\"\n\nReactDOM.render(\n    <Provider store={store}> <App /></Provider>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}